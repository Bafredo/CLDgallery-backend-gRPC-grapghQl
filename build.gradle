plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.muyoma'
version = '0.0.1-SNAPSHOT'

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
//}

repositories {
    mavenCentral()
}


dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // MySQL Driver
    runtimeOnly 'com.mysql:mysql-connector-j'


    implementation 'net.devh:grpc-server-spring-boot-autoconfigure:2.14.0.RELEASE'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // GraphQL dependencies
//    implementation 'org.springframework.boot:spring-boot-starter-graphql'
//    implementation 'com.graphql-java:graphql-java'

    // gRPC dependencies
    implementation 'net.devh:grpc-server-spring-boot-starter:2.14.0.RELEASE'
    implementation 'io.grpc:grpc-netty-shaded:1.63.0'
    implementation 'io.grpc:grpc-protobuf:1.63.0'
    implementation 'io.grpc:grpc-stub:1.63.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.protobuf:protobuf-java:4.28.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    implementation 'com.cloudinary:cloudinary-http44:1.36.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}  // Applies the gRPC plugin
            }
//            task.builtins {
//                java {} // Ensures Java classes are generated
//            }
        }
    }
}


sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/source/proto/main/java"
            srcDirs += "$buildDir/generated/source/proto/main/grpc"
        }
    }
}

//tasks.named('test') {
//    useJUnitPlatform()
//}
tasks.named('compileJava') {
    dependsOn 'generateProto'
}

